import Levenshtein

# Extended list of values
values = [
    'aku', 'nomor rekening', '2000222', 'saldo', '1000000', 'nomor rekening', '23444','account number', '20009', 'nama', 'bambang', 'alamat', 'jl. kemang',
    'nama', 'hartono', 'kode pos', '12730', 'phone number', '08123456789', 'amount', 'Rp239', 'bank', 'bca', 'email', 'bambang@gmail.com', 'jenis kelamin', 'pria'
]

# Keywords dictionary
keywords_dict = {
    'account number': ['no rekening', 'account no'],
    'name': ['name', 'nama'],
    'amount': ['amount'],
    'phone number': ['phone number', 'no hp'],
    'email': ['email', 'e-mail']
}

def find_closest_matches(values, category, threshold_probability=0.8):
    # Check if the category exists in the keywords dictionary
    if category not in keywords_dict:
        return []

    matched_values = []

    # Normalize the values to lower case
    normalized_values = [value.lower() for value in values]

    # Get the list of keywords for the specified category
    keywords = keywords_dict[category]

    # Current keyword being processed
    current_keyword = None

    for value in normalized_values:
        for keyword in keywords:
            # Compute the similarity ratio
            similarity = Levenshtein.ratio(value, keyword.lower())
            
            # If similarity is above threshold, consider it a match
            if similarity >= threshold_probability:
                current_keyword = keyword.lower()
                break

        # If the value follows a recognized keyword, add it to matched values
        if current_keyword:
            idx = normalized_values.index(value)
            if idx + 1 < len(normalized_values):
                matched_values.append(values[idx + 1])

            # Reset current_keyword
            current_keyword = None

    return matched_values

# Find and print the matched values for each category with a specified threshold probability
matched_values_account = find_closest_matches(values, 'account number', threshold_probability=0.8)
matched_values_name = find_closest_matches(values, 'name', threshold_probability=0.8)
matched_values_amount = find_closest_matches(values, 'amount', threshold_probability=0.8)
matched_values_phone = find_closest_matches(values, 'phone number', threshold_probability=0.8)
matched_values_email = find_closest_matches(values, 'email', threshold_probability=0.8)

print("Account Numbers:", matched_values_account)
print("Names:", matched_values_name)
print("Amounts:", matched_values_amount)
print("Phone Numbers:", matched_values_phone)
print("Emails:", matched_values_email)
